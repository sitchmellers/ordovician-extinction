#################################################################################################################
#' Simulate the carbon balance of a soil profile experiencing deposition of soil transported to the depositional location from an eroding profile
#'
#' @param dep_profile A profile data frame object generated by SOrCERO::gen_profile_SOC().
#' @param ero_process An erosional profile list object generated by SOrCERO::erosion().
#' @param time A number representing the amount of time steps to simulate.
#' @param k_ero A numeric vector representing the natural log of the oxidation first order rate constant, ln(-k), for each layer of the eroded profile.
#' @param I_ero A numeric vector representing the SOC production, I, in units of kg/m^2/time for each layer of the eroded profile.
#' @param n_ox_ero A numeric vector representing the oxidation mixing coefficient for each layer of the eroded profile.
#' @param n_prod_ero A numeric vector representing the production mixing coefficient for each layer of the eroded profile.
#' @param k_dep A numeric vector representing the natural log of the oxidation first order rate constant, ln(-k), for each layer of the depositional profile.
#' @param I_dep A numeric vector representing the SOC production, I, in units of kg/m^2/time for each layer of the depositional profile.
#' @param n_ox_dep A numeric vector representing the oxidation mixing coefficient for each layer of the depositional profile.
#' @param n_prod_dep A numeric vector representing the production mixing coefficient for each layer of the depositional profile.
#' @param frac_oxidized A numeric vector representing the fraction of eroded SOC which is oxidized in transport. Default is 0 for the entire profile. Minimum length of frac_oxidized is equal to the time argument.

#' @return A list of two parts. The first, "Depositional Process" is another list whose entries represent the depositional profile at a given time step, starting with 0. The second object in the list, "Dep Timestep Metrics", gives a dataframe of useful metrics with rows as time step.

#' @export
#' @import ggplot2
#' @importFrom minpack.lm nlsLM
#' @import crayon
#' @importFrom reshape melt


deposition<-function(dep_profile, ero_process, time, k_ero=ero_process$Profile$Profile$k, I_ero=NULL, n_ox_ero, n_prod_ero, k_dep=dep_profile$Profile$k, I_dep=NULL, n_ox_dep, n_prod_dep,
                     frac_oxidized=rep(0.0, length(ero_process[[1]]))){
  starttime<-Sys.time()

  k_ero<-ero_process$Profile$Profile$k

  k_dep<-dep_profile$Profile$k

  if(is.null(I_dep)) {#if I wasn't supplied we can just generate it
    I_dep<-dep_profile$Profile$SOC[1:length(k_dep)]*(exp(-k_dep))
  }
  if(is.null(I_ero)) {#if I wasn't supplied we can just generate it
    I_ero<-ero_process$Profile$Profile$SOC[1:length(k_ero)]*(exp(-k_ero))
  }

#
#   if(exp(-k_ero[1])!=I_ero[1]){
#     warning("Initial values of  profile K and I are not equal", call. = FALSE)
#   }
#
#   if(exp(-k_dep[1])!=I_dep[1]){
#     warning("Initial values of deposition profile K and I are not equal", call. = FALSE)
#   }

  if (length(k_ero)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(k_ero[length(k_ero)], (nrow(dep_profile$Profile)+time)-length(k_ero))
    k_ero<-c(k_ero, rest)
  }
  if (length(I_ero)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(I_ero[length(I_ero)], (nrow(dep_profile$Profile)+time)-length(I_ero))
    I_ero<-c(I_ero, rest)
  }
  if (length(n_prod_ero)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(n_prod_ero[length(n_prod_ero)], (nrow(dep_profile$Profile)+time)-length(n_prod_ero))
    n_prod_ero<-c(n_prod_ero, rest)
  }
  if (length(n_ox_ero)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(n_ox_ero[length(n_ox_ero)], (nrow(dep_profile$Profile)+time)-length(n_ox_ero))
    n_ox_ero<-c(n_ox_ero, rest)
  }

  if (length(k_dep)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(k_dep[length(k_dep)], (nrow(dep_profile$Profile)+time)-length(k_dep))
    k_dep<-c(k_dep, rest)
  }
  if (length(I_dep)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(I_dep[length(I_dep)], (nrow(dep_profile$Profile)+time)-length(I_dep))
    I_dep<-c(I_dep, rest)
  }
  if (length(n_prod_dep)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(n_prod_dep[length(n_prod_dep)], (nrow(dep_profile$Profile)+time)-length(n_prod_dep))
    n_prod_dep<-c(n_prod_dep, rest)
  }
  if (length(n_ox_dep)+1<=nrow(dep_profile$Profile)+time){
    rest<-rep(n_ox_dep[length(n_ox_dep)], (nrow(dep_profile$Profile)+time)-length(n_ox_dep))
    n_ox_dep<-c(n_ox_dep, rest)
  }
  dep_list<-list()
  ero_rate<-ero_process[[1]][[1]]$orig_depth[2]-ero_process[[1]][[1]]$orig_depth[1]
  for (t in 1:time){
    if (t==1){
      dep_df<-data.frame('time_int'=rep(t, nrow(dep_profile$Profile)+1), 'layers'=(min(dep_profile$Profile$layers)-1):max(dep_profile$Profile$layers),
                         'new_layer'=rep(NA, nrow(dep_profile$Profile)+1),
                         'orig_depth'=seq(dep_profile$Profile$depth[1]-ero_rate, dep_profile$Profile$depth[nrow(dep_profile$Profile)], ero_rate),
                         'new_depth'=seq(ero_rate, dep_profile$Profile$depth[nrow(dep_profile$Profile)]+ero_rate, ero_rate),
                         'SOC'= c(NA, dep_profile$Profile$SOC))
      for (l in 1:nrow(dep_df)){
        if (l==1){
          dep_df$SOC[l]<-(ero_process$`Erosion Process`[[t]][1,]$SOC*(1-frac_oxidized[l]))
        }
        else{
          if (l>length(ero_process$`Erosion Process`)){
            dep_df$SOC[l]<-dep_profile$Profile$SOC[l-1]-((n_ox_dep[l-1]*
                                                          dep_profile$Profile$SOC[l-1]*
                                                          exp(-k_dep[l]))+
                                                         (1-n_ox_dep[l-1])*
                                                          dep_profile$Profile$SOC[l-1]*
                                                          exp(-k_dep[l-1]))*
                                                          1+n_prod_dep[l-1]*
                                                          I_dep[l]+
                                                          (1-n_prod_dep[l-1])*
                                                          I_dep[l-1]
          }
          else{
            # if(l==2){
            #   print(head(dep_df))
            #   print(t)
            #   print(paste('layer',l))
            #   print(paste('q4', dep_df$SOC[l-1]))
            #   print(paste('nox', n_ox_dep[l-1]))
            #   print(paste('nprod', n_prod_dep[l-1]))
            #   print(paste('k with t', k_dep[l]))
            #   print(paste('k without t', k_dep[l-1]))
            #   print(paste('I with t', I_dep[l]))
            #   print(paste('I without T', I_dep[l-1]))
            # }
            dep_df$SOC[l]<-dep_profile$Profile$SOC[l-1]-((n_ox_dep[l-1]*
                                                          dep_profile$Profile$SOC[l-1]*
                                                          exp(-k_dep[l]))+
                                                         ((1-n_ox_dep[l-1])*
                                                          dep_profile$Profile$SOC[l-1]*
                                                          exp(-k_dep[l-1])))*
                                                          1+n_prod_dep[l-1]*
                                                          I_dep[l]+
                                                          ((1-n_prod_dep[l-1])*
                                                          I_dep[l-1])
          }
        }
      }
      dep_df$new_layer<-(min(dep_profile$Profile$layers)):nrow(dep_df)
      dep_profile$Profile$time_int<-rep(0, nrow(dep_profile$Profile))
      dep_profile$Profile$new_layer<-dep_profile$Profile$layers
      names(dep_profile$Profile)[names(dep_profile$Profile)=='depth']<-'orig_depth'
      dep_profile$Profile$new_depth<-dep_profile$Profile$orig_depth
      dep_list[[1]]<-dep_profile$Profile[, c(4,1,5,3,6,2)]
      dep_list[[2]]<-dep_df
    }
    else{
      h_df<-data.frame('time_int'=rep(t, nrow(dep_profile$Profile)+t), 'layers'=(min(dep_df$layers)-1):max(dep_df$layers),
                       'new_layer'=1:(nrow(dep_profile$Profile)+t),
                       'orig_depth'=seq(dep_df$orig_depth[1]-ero_rate, dep_profile$Profile$orig_depth[nrow(dep_profile$Profile)], ero_rate),
                       'new_depth'=seq(ero_rate, dep_df$new_depth[nrow(dep_df)]+ero_rate, ero_rate),
                       'SOC'=rep(NA, nrow(dep_profile$Profile)+t))
      #print(head(h_df))
      for (l in 1:nrow(h_df)){
        if (l==1){
          h_df$SOC[l]<-(ero_process$`Erosion Process`[[t]][1,]$SOC*(1-frac_oxidized[l]))
        }
        else{
          if(h_df$layers[l] < 1){
            if(l>length(ero_process$`Erosion Process`)){
              #print(head(dep_df))
              h_df$SOC[l]<-dep_df$SOC[l-1]-((n_ox_ero[l-1]*
                                            dep_df$SOC[l-1]*
                                            exp(-k_ero[l]))+
                                            ((1-n_ox_ero[l-1])*
                                            dep_df$SOC[l-1]*
                                            exp(-k_ero[l-1])))*
                                            1+n_prod_ero[l-1]*
                                            I_ero[l]+
                                            ((1-n_prod_ero[l-1])*
                                            I_ero[l-1])
            }
            else{
              h_df$SOC[l]<-dep_df$SOC[l-1]-              #term1, SOC
                ((n_ox_ero[l-1]*                             #term2, nox
                    dep_df$SOC[l-1]*                     #term2, nox*SOC
                    exp(-k_ero[l]))+                     #term3, exp(-k) with t
                   ((1-n_ox_ero[l-1])*                      #term4, 1-nox without t
                      dep_df$SOC[l-1]*                  #term5, SOC[l-1]
                      exp(-k_ero[l-1])))*                   #term6, exp k without t
                1+n_prod_ero[l-1]*                     #term7, 1+nprod without t
                I_ero[l]+                            #term 8, I with t
                ((1-n_prod_ero[l-1])*                  #term9, 1-nprod without t
                   I_ero[l-1])                        #term10, I without t

            }
          }
          else{
            if(l>length(ero_process$`Erosion Process`)){
#
#               print(t)
#               print(paste('layer',l))
#               print(paste('q4', dep_df$SOC[l-1]))
#               print('last df layers')
#               print(head(dep_df))
#               print(paste('nox', n_ox_dep[l-1]))
#               print(paste('nprod', n_prod_dep[l-1]))
#               print(paste('k with t', k_dep[l]))
#               print(paste('k without t', k_dep[l-1]))
#               print(paste('I with t', I_dep[l]))
#               print(paste('I without T', I_dep[l-1]))

              h_df$SOC[l]<-dep_df$SOC[l-1]-((n_ox_dep[l-1]*dep_df$SOC[l-1]*exp(-k_dep[l]))+
                                              ((1-n_ox_dep[l-1])*dep_df$SOC[l-1]*exp(-k_dep[l-1])))*
                1+n_prod_dep[l-1]*I_dep[l]+((1-n_prod_dep[l-1])*I_dep[l-1])
            }
            else{
              h_df$SOC[l]<-dep_df$SOC[l-1]-              #term1, SOC
                ((n_ox_dep[l-1]*                             #term2, nox
                    dep_df$SOC[l-1]*                     #term2, nox*SOC
                    exp(-k_dep[l]))+                     #term3, exp(-k) with t
                   ((1-n_ox_dep[l-1])*                      #term4, 1-nox without t
                      dep_df$SOC[l-1]*                  #term5, SOC[l-1]
                      exp(-k_dep[l-1])))*                   #term6, exp k without t
                1+n_prod_dep[l-1]*                     #term7, 1+nprod without t
                I_dep[l]+                            #term 8, I with t
                ((1-n_prod_dep[l-1])*                  #term9, 1-nprod without t
                   I_dep[l-1])                        #term10, I without t
            }
          }
        }
      }
      dep_df<-h_df
    }

    #print(summary(dep_df))
    dep_list[[t+1]]<-dep_df
  }
  totSOC<-c()
  for (i in 1:length(dep_list)-1){
    totSOC[i]<-sum(dep_list[[i+1]]$SOC)
  }
  #print(length(totSOC))
  preoxcontent<-c()

  for (i in 1:length(dep_list)-1){
    preoxcontent[i]<-sum(dep_profile$Profile$SOC, ero_process$`Timestep Metrics`$`Erosion Per Timestep`[1:i])
  }#just what is being deposited at the bottom of hill, before oxidation and production
  #if that SOC arrives from uphill, flash freezes, and there's no more activity after it arrives

  netchange<-c()

  for (i in 1:length(dep_list)-1){
    netchange[i]<-sum(dep_profile$Profile$SOC)-totSOC[i] #totSOC is giving a t
  }

  dep_time_metrics<-data.frame(
    'Time_Index'=1:time,
    'SOC Deposited per Timestep (kg/m^2)'=ero_process$`Timestep Metrics`$`Erosion Per Timestep`[1:time],
    'Cumulative SOC Depositited (kg/m^2)'=cumsum(ero_process$`Timestep Metrics`$`Erosion Per Timestep`)[1:time],
    'Total SOC in Depositional System (kg/m^2)'=totSOC,
    'Pre-Oxidation and Production C Mass Content of System (kg/m^2)'=preoxcontent,
    'Cumulative Net Change in Dep SOC (kg/m^2)'=preoxcontent-totSOC,#Net effect of production and oxidation
    'Net Depositional Profile Change (kg/m^2)'= netchange, #net change at every timestep, make this more clear
    check.names = FALSE
  )

  melted_graph_df<-reshape::melt(dep_time_metrics[c(1,4,6,7)], id='Time_Index')

  plt2<-ggplot2::ggplot(data=melted_graph_df, ggplot2::aes(x=Time_Index, y=value, color= variable))+
    ggplot2::geom_line(size=1.5)+
    ggplot2::ylab(label=bquote('SOC, kg C/'~m^2))+
    ggplot2::xlab('Time Index')+
    ggplot2::scale_color_manual(values=c('darkgreen','grey', 'lightblue'))+
    ggplot2::theme(legend.position = 'bottom',legend.direction = 'vertical', legend.title = element_blank())+
    ggplot2::labs(title="Total SOC and Net Change")
  print(plt2)

  cat('System Source (+) or Sink (-) at Timestep', time, ':', crayon::green(netchange[time],'\n'))
  endtime<-Sys.time()
  cat('Runtime: ', crayon::cyan(endtime-starttime),'\n')
  returnlist<-list('Depositional Process'=dep_list, 'Dep Timestep Metrics'=dep_time_metrics, 'Profile'=dep_profile)

  class(returnlist) <-append(class(returnlist), 'DepositionProcess')


  return(returnlist)
}


# dep_test<-deposition(dep_profile=Deposition_profile,
#                      ero_process=erosion_model,
#                      time=200,
#                      n_ox_ero=0.5,
#                      n_prod_ero=0.5,
#                      n_ox_dep = 0.5,
#                      n_prod_dep = 0.5,
#                      frac_oxidized = rep(0, 200))




# dep_test<-deposition(dhprofile,
#                      test2,
#                      time=50,
#                      k_ero=properties$K,
#                      I_ero=properties$I,
#                      n_ox_ero=properties$nox,
#                      n_prod_ero=properties$nprod,
#                      k_dep = properties$K,
#                      I_dep = properties$I,
#                      n_ox_dep = properties$nox,
#                      n_prod_dep = properties$nprod)

# nrow(dep_test$`Dep Timestep Metrics`)
# length(dhprofile)
#
# nrow(dhprofile$Profile)
# #
# properties
#
# head(dep_test$`Dep Timestep Metrics`, 10)
# colnames(dep_test$`Dep Timestep Metrics`)
# #
#
# vec<-c(1,2,3,4,5,6,7,8,9,10)
#
# p2<-read.csv('properties2.csv')
# nrow(p2)



